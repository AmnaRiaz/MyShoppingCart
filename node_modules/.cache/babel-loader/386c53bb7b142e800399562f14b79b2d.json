{"ast":null,"code":"const {\n  createSlice,\n  createAsyncThunk\n} = require('@reduxjs/toolkit');\n\nexport const STATUSES = Object.freeze({\n  IDLE: 'idle',\n  ERROR: 'error',\n  LOADING: 'loading'\n});\nconst productSlice = createSlice({\n  name: 'product',\n  initialState: {\n    data: [],\n    status: STATUSES.IDLE\n  },\n  reducers: {// setProducts(state, action) {\n    //     state.data = action.payload;\n    // },\n    // setStatus(state, action) {\n    //     state.status = action.payload;\n    // },\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchProducts.pending, (state, action) => {\n      state.status = STATUSES.LOADING;\n    }).addCase(fetchProducts.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.status = STATUSES.IDLE;\n    }).addCase(fetchProducts.rejected, (state, action) => {\n      state.status = STATUSES.ERROR;\n    });\n  }\n});\nexport const {\n  setProducts,\n  setStatus\n} = productSlice.actions;\nexport default productSlice.reducer; // Thunks\n\nexport const fetchProducts = createAsyncThunk('products/fetch', async () => {\n  const res = await fetch('https://fakestoreapi.com/products');\n  const data = await res.json();\n  return data;\n}); // export function fetchProducts() {\n//     return async function fetchProductThunk(dispatch, getState) {\n//         dispatch(setStatus(STATUSES.LOADING));\n//         try {\n//             const res = await fetch('https://fakestoreapi.com/products');\n//             const data = await res.json();\n//             dispatch(setProducts(data));\n//             dispatch(setStatus(STATUSES.IDLE));\n//         } catch (err) {\n//             console.log(err);\n//             dispatch(setStatus(STATUSES.ERROR));\n//         }\n//     };\n// }","map":{"version":3,"sources":["/home/invozone/shopping/redux-shopping-cart/src/store/productSlice.js"],"names":["createSlice","createAsyncThunk","require","STATUSES","Object","freeze","IDLE","ERROR","LOADING","productSlice","name","initialState","data","status","reducers","extraReducers","builder","addCase","fetchProducts","pending","state","action","fulfilled","payload","rejected","setProducts","setStatus","actions","reducer","res","fetch","json"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAAoCC,OAAO,CAAC,kBAAD,CAAjD;;AAEA,OAAO,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc;AAClCC,EAAAA,IAAI,EAAE,MAD4B;AAElCC,EAAAA,KAAK,EAAE,OAF2B;AAGlCC,EAAAA,OAAO,EAAE;AAHyB,CAAd,CAAjB;AAMP,MAAMC,YAAY,GAAGT,WAAW,CAAC;AAC7BU,EAAAA,IAAI,EAAE,SADuB;AAE7BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAE,EADI;AAEVC,IAAAA,MAAM,EAAEV,QAAQ,CAACG;AAFP,GAFe;AAM7BQ,EAAAA,QAAQ,EAAE,CACN;AACA;AACA;AACA;AACA;AACA;AANM,GANmB;AAc7BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CACFC,OADL,CACaC,aAAa,CAACC,OAD3B,EACoC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/CD,MAAAA,KAAK,CAACP,MAAN,GAAeV,QAAQ,CAACK,OAAxB;AACH,KAHL,EAIKS,OAJL,CAIaC,aAAa,CAACI,SAJ3B,EAIsC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACR,IAAN,GAAaS,MAAM,CAACE,OAApB;AACAH,MAAAA,KAAK,CAACP,MAAN,GAAeV,QAAQ,CAACG,IAAxB;AACH,KAPL,EAQKW,OARL,CAQaC,aAAa,CAACM,QAR3B,EAQqC,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAChDD,MAAAA,KAAK,CAACP,MAAN,GAAeV,QAAQ,CAACI,KAAxB;AACH,KAVL;AAWH;AA1B4B,CAAD,CAAhC;AA6BA,OAAO,MAAM;AAAEkB,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAA6BjB,YAAY,CAACkB,OAAhD;AACP,eAAelB,YAAY,CAACmB,OAA5B,C,CAEA;;AACA,OAAO,MAAMV,aAAa,GAAGjB,gBAAgB,CAAC,gBAAD,EAAmB,YAAY;AACxE,QAAM4B,GAAG,GAAG,MAAMC,KAAK,CAAC,mCAAD,CAAvB;AACA,QAAMlB,IAAI,GAAG,MAAMiB,GAAG,CAACE,IAAJ,EAAnB;AACA,SAAOnB,IAAP;AACH,CAJ4C,CAAtC,C,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["const { createSlice, createAsyncThunk } = require('@reduxjs/toolkit');\n\nexport const STATUSES = Object.freeze({\n    IDLE: 'idle',\n    ERROR: 'error',\n    LOADING: 'loading',\n});\n\nconst productSlice = createSlice({\n    name: 'product',\n    initialState: {\n        data: [],\n        status: STATUSES.IDLE,\n    },\n    reducers: {\n        // setProducts(state, action) {\n        //     state.data = action.payload;\n        // },\n        // setStatus(state, action) {\n        //     state.status = action.payload;\n        // },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchProducts.pending, (state, action) => {\n                state.status = STATUSES.LOADING;\n            })\n            .addCase(fetchProducts.fulfilled, (state, action) => {\n                state.data = action.payload;\n                state.status = STATUSES.IDLE;\n            })\n            .addCase(fetchProducts.rejected, (state, action) => {\n                state.status = STATUSES.ERROR;\n            });\n    },\n});\n\nexport const { setProducts, setStatus } = productSlice.actions;\nexport default productSlice.reducer;\n\n// Thunks\nexport const fetchProducts = createAsyncThunk('products/fetch', async () => {\n    const res = await fetch('https://fakestoreapi.com/products');\n    const data = await res.json();\n    return data;\n});\n\n// export function fetchProducts() {\n//     return async function fetchProductThunk(dispatch, getState) {\n//         dispatch(setStatus(STATUSES.LOADING));\n//         try {\n//             const res = await fetch('https://fakestoreapi.com/products');\n//             const data = await res.json();\n//             dispatch(setProducts(data));\n//             dispatch(setStatus(STATUSES.IDLE));\n//         } catch (err) {\n//             console.log(err);\n//             dispatch(setStatus(STATUSES.ERROR));\n//         }\n//     };\n// }\n"]},"metadata":{},"sourceType":"module"}